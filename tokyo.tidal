-- Hello!

d1 $ sound "drum"

d2 $ sound "cp"

d1 silence

-- on the raspberry pis it's different!

-- no d1

d1 $ sound "drum:0 drum:1 drum:2"

-- run all patterns with alt-enter
-- start/stop individual patterns with alt-1, alt-2, etc
-- stop all with alt-h

-- My slides
-- https://docs.google.com/presentation/d/1Emu5NB_0gUaQhk317B5MkgsfBLgTI_mDvJNRJ8aiaeU/edit#slide=id.g24d24bd416_0_37

Advanced examples:

-- pattern parameters
d3 $ fast "<1 0.5>" $ sound "cp sn:2" # speed 1.5 # crush 3

-- compress different patterns into different parts of cycle
d2 $ compress (0,1/3) $ iter 4 $ n "0 .. 3" # sound "sn:3" # legato 1 # speed 1

d3 $ compress (1/3,1) $ fast "<1 0.5>" $ sound "cp:4(3,8) cp:2*2" # speed 1.5 # crush 3

-- repeat random values
d4 $ repeatCycles 4 $ struct "x*8?" $ sound "kicklinn"

-- scan!
d1 $ jux (rev . (0.25 <~)) $ n (scan 8) # sound "sn" # speed 2

-- fit
d1 $ n (fit 3 [0,2,7,24] "0 [1 0] [~ 3] 1" )
  # s "supermandolin" # legato 2 |-| n 12
  # lpf (sine * 5000 + 800)
  # lpq 0.2

d1 $ jux ((|+ n 12) . rev) $ off 0.25 ((# s "superpiano") . arpg . struct "x(3,8)")
  $ n (off (1/16) (+12) $ off 0.125 (+7) $ fit 3 [0,5,7,24] "0 [1 0] [~ 3] 1" )
  # s "supermandolin" # legato 1 |- n 12

d1 $ degrade $ off 0.25 ((|+ n 24) .(# (s "supermandolin" #  gain 0.9 # legato 0.5))) $ jux rev $ n (off 0.125 (+12) $ off 0.25 (+7) $ palindrome $ fit 3 [0,2,7,12] "0 [~ 1] 1 [~ 3]") # s "supermandolin"
  # lpf (sine * 3000 + 3000)
  # lpq 0.2
  # legato 2
  |*| speed 1.5

d2 $ iter 4 $ jux rev $ sound "kicklinn(3,8,<0 2 4 2>)" # speed 2
  # gain 1.2
  # room 0.1 # sz 0.9 # orbit 1

d3 $ jux rev $ loopAt 2 $ slice "0 <3 4*4> 2 4*8 5 2*4 4 7*2" 8 $ sound "arc" # gain 1.3
  # legato 1

d4 $ jux rev $ n (off 0.25 (+12) $ off 0.125 (+7) $ "<c(3,8) e*2 f(3,8,2) g(3,8,4)>") # sound "rash" |+ n "36"
  # cps ("0.8")
  # lpf (slow 4 $ scale 3000 500 sine)
  # lpq 0.1

-- slice

d1 $ loopAt 2 $ slice ("[0 1?] <2*3 3*2> <4*2> 7") 8 $ sound "arc"
  # legato 1

-- cps fun

-- linger

d1 $ every 4 (linger (1/2)) $ iter 4 $ n "0 .. 7" # sound "sn"
  # legato 1
  # speed 1

-- off

-- ply
d1 $ every 4 (ply 2) $ slow 2 $ n "0 .. 7" # sound "drum"
  # legato 1
  # speed 0.5

-- sew
d1 $ iter 4 $ sew (iter 4 "[t f] <f [t f]>")
  (sound "bd:4*8")
  (sound "sn:4(3,8)" # speed 1.5)

-- spaceOut
d1 $ spaceOut [1,2,0.5] $ sound "bd*2 hc:3"

-- stripe
d1 $ jux rev $ superimpose (stripe 2) $ sound "bd mt lt ~" # speed 2

-- superimpose
d1 $ someCycles (jux rev . (# speed 2))
  $ every 2 (superimpose (hurry 4 . rev)) $ sound "bd [sn:2 cp:4]"

-- within
d1 $ within (0,0.5) (# crush 4) $ someCycles (jux rev . (# speed 2))
  $ every 2 (superimpose (hurry 4 . rev)) $ sound "bd [sn:2 cp:4]"


d1 $ smash 4 [1,2] $ within (0,0.5) (# crush 4) $ someCycles (jux rev . (# speed 2))
  $ every 2 (superimpose (hurry 4 . rev)) $ sound "bd [sn:2 cp:4]"

-- stut

d1 $ jux rev $ iter 4 $ stut 16 0.5 (toRational <$> sine * 0.4 + 0.04) $ sound "bd cp:4 bd(3,8) cp:4"
  # legato 1
