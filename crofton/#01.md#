---
title: Tidal
geometry: margin=2cm
...

# Tidal

Welcome to this workshop on tidalcycles, known as *tidal* for short.

Rough schedule for day one:

## Morning

* Background to live coding
* Thinking about patterns
* Simple looping
* More complicated rhythms

## Afternoon

* Quipu
* Transforming patterns

# Looping sounds with Tidal

Using simple high (`h`) and low (`l`) drum sounds.

```
sound "h l"
```

"Have you got a dog, great big dog."

```
sound "h*4 l h*2 l"
```

## Sub-sequences

You can break down an step put it inside `[` and `]` with a comma.

```
d1 $ sound "[bd]"
```

Before we get hands on, lets look at some visual renderings of tidal patterns.

Sequences in tidal are generally denoted with double quotes:

```{.haskell render="colour" cycles=6}
"red pink"
```

You can 'read' the above diagram clockwise, from the top. You can see
that the pattern repeats once per cycle. Six cycles are shown, but it
will go on for ever. Here's what happens if we add another step to the sequence:


```{.haskell render="colour" cycles=6}
"red pink blue"
```

You can see that the steps have got shorter, so that they fit into
the space. This already demonstrates how tidal is about cycles, not beats.

## Make a sound

Make sure supercollider is running, and SuperDirt is running inside
that (via the `SuperDirt.start` command, which you can put in the
supercollider startup file so it automatically runs).

Run the following in atom, via ctrl-Enter (or on a mac, cmd-Enter):

```
d1 $ sound "bd"
```

Stop making a sound!

```
d1 silence
```

Tip: Make sure your tidal patterns have an empty line above and below,
as tidal can't currently run two commands at once (there are
workarounds for this).

Lets break that down..

* `d1` is a connection to the sound synthesiser, SuperDirt. There is also `d2`, up to `d9` or so.
* `$` passes what's on the right (`sound "bd"`) to what's on the left
  (`d1`). Without this, Tidal would only read as far as `sound` and
  get confused!
* `sound` says that a pattern of sounds (samples or synths) is coming up. That is, it turns a pattern of words into a pattern of sounds.
* `"bd"` is a pattern of words, in this case the single word `bd`,
  refering to a bass drum sound sample somewhere on your computer.

## Where do the sounds come from?

Some are softsynths, e.g. supermandolin, superpiano, supergong etc

Most are sound samples, you can find them (and add to them) via SuperCollider.. File > Open User Support Directory -> downloaded-quarks > Dirt Samples


# More visual patterns

Some patterns to mull over as we go through Tidal..

Embedded substeps

```{.haskell render="colour" cycles=10}
"red pink [blue green [brown yellow]*2] orange"
```

Sometimes take one out

```{.haskell render="colour" cycles=10}
"red pink blue? orange"
```

Euclidean rhythms

```{.haskell render="colour" cycles=10}
"red(3,8)"
```

```{.haskell render="colour" cycles=10}
"[red(3,8), pink(5,8)]"
```

Polyrhythm

```{.haskell render="colour" cycles=10}
"{red pink, blue green yellow}"
```

Polymeter

```{.haskell render="colour" cycles=10}
"[red pink, blue green yellow]"
```

Take one per cycle with `<>`

```{.haskell render="colour" cycles=10}
"[red pink] <blue green yellow>"
```

Twice as fast every third cycle

```{.haskell render="colour" cycles=10}
every 3 (fast 2) "white lightblue blue darkblue"
```

Some cycles, reverse the cycle

```{.haskell render="colour" cycles=10}
someCycles rev "white lightblue blue darkblue"
```

Pattern the speed

```{.haskell render="colour" cycles=10}
fast "4 2" "white lightblue blue darkblue"
```

```{.haskell render="colour" cycles=10}
fast "[4, 3]" "white lightblue blue darkblue"
```

```{.haskell render="colour" cycles=10}
fast "<4 2>" "white lightblue blue darkblue"
```

Pattern the euclidean values

```{.haskell render="colour" cycles=10}
"[red(<3 5>,8), pink(<5 3>,8)]"
```

Shift time

```{.haskell render="colour" cycles=10}
every 3 (0.25 <~) "white lightblue blue darkblue"
```

Shift time, successively

```{.haskell render="colour" cycles=10}
iter 4 "white lightblue blue darkblue"
```

Combine transformations to get something unexpected

```{.haskell render="colour" cycles=10}
superimpose (fast "2 4") $ iter 4 $ superimpose rev
    $ every 3 (0.25 <~) $ "[white grey lightblue, orange red]"
```

